import "./styles.css"
import { Provider } from "react-redux"
import { useState, createContext, useContext } from "react"
import { createPostStore } from "../../../redux/store"

import { celesupApi } from "../../../axiosInstances"
import Modal from "../../../features/Modal"
import { GlobalContext } from "../../../App"

import { PostModalHeader } from "./utils"

import useCreate from "./useCreate"

export const PostContext = createContext({})

export default function Create() {
    const context = useContext(GlobalContext)
    const [headerOptions, setHeaderOptions] = useState(
        getInitialHeaderOptions(exitPostCreation),
    )
    const {
        data,
        setData,
        error,
        setError,
        pending,
        setPending,
        form,
        updateForm,
        state,
        dispatch,
        postData,
        updatePostData,
        dispatcher,
    } = useCreate(setHeaderOptions)

    async function submitForm() {
        // if (!form?.META?.VALID) return

        if (
            !postData.caption &&
            !postData.picture &&
            !postData.excerpt &&
            !postData.video
        )
            return

        const _form = new FormData()

        _form.append("caption", postData.caption || "")
        _form.append("excerpt", postData.excerpt || "")
        _form.append("hashtags", postData.hashtags || "")

        if (postData.picture) {
            if (typeof postData.picture === Blob) {
                postData.picture = new File(
                    [postData.picture],
                    `picture${postData.picture.size}`,
                    { type: postData.picture.type },
                )
            }
            _form.append("picture", postData.picture)
        }
        if (postData.video) {
            _form.append("video", postData.video)
        }
        if (postData.thumbnail) {
            postData.thumbnail = new File(
                [postData.thumbnail],
                `thumbnail${postData.thumbnail.size}.jpg`,
                { type: "image/jpg" },
            )
            _form.append("thumbnail", postData.thumbnail)
        }

        celesupApi
            .post("/posts/create", _form, {
                headers: { "Content-Type": "multipart/form-data" },
            })
            .then(
                (res) => {
                    if (res.status === 201 && !context.state?.reFetchPosts) {
                        if (window.location.href === "/") {
                            window.location.reload()
                        } else {
                            window.location.href = "/"
                        }
                    } else if (res.status === 201) {
                        context.state.reFetchPosts()
                        exitPostCreation()
                    }
                },
                (err) => {
                    console.log(err)
                    setError(err.response?.data)
                },
            )
            .catch((err) => {
                console.log(err)
                setError(err.message)
            })

        // await sendAxiosRequest({
        //     axiosInstance: celesupApi,
        //     url: "/posts/create",
        //     method: "POST",
        //     form: form,
        //     options: { headers: { "Content-Type": "multipart/form-data" } },
        // })
    }

    function exitPostCreation() {
        context.setFocusState({
            ...context.state,
            createPost: null,
        })
    }

    const value = {
        error,
        setError,
        pending,
        setPending,
        postData,
        updatePostData,
        submitForm,
        setHeaderOptions,
        exitPostCreation,
        dispatcher,
    }

    return (
        <>
            <PostContext.Provider value={{ ...value }}>
                <Provider store={createPostStore}>
                    {state.currentJXS && (
                        <Modal
                            options={{
                                setHeader: (
                                    <PostModalHeader options={headerOptions} />
                                ),
                            }}
                            children={state.currentJXS}
                        />
                    )}
                </Provider>
            </PostContext.Provider>
        </>
    )
}

function getInitialHeaderOptions(handleModalActions) {
    return {
        actionBtn: false,
        backBtn: false,
        editBtn: false,
        defaultBtn: false,
        closeBtn: true,
        METHODS: {
            onCloseBtnClicked: () => handleModalActions(true, null),
        },
    }
}
